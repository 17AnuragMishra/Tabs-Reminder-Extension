let pendingTabs = [];

document.addEventListener("DOMContentLoaded", function () {
    const addTabBtn = document.getElementById("add-tab-btn");
    addTabBtn.addEventListener("click", function () {
        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
            const currentTab = tabs[0];
            const tabData = {
                title: currentTab.title,
                url: currentTab.url,
                reminder: false,
                reminderTime: null
            };
            pendingTabs.push(tabData);
            chrome.storage.local.set({ pendingTabs: pendingTabs });
            updatePendingTabsList();
        });
    });

    chrome.storage.local.get("pendingTabs", function (result) {
        if (result.pendingTabs) {
            pendingTabs = result.pendingTabs;
            updatePendingTabsList();
        }
    });
});

function updatePendingTabsList() {
    const pendingTabsList = document.getElementById("pending-tabs-list");
    pendingTabsList.innerHTML = "";
    pendingTabs.forEach((tab, index) => {
        const listItem = document.createElement("li");
        listItem.textContent = tab.title.substring(0, 15) + "...";
        listItem.dataset.index = index;
        if (tab.reminder) {
            listItem.textContent += " (Reminder set)";
        }
        const editBtn = document.createElement("button");
        editBtn.textContent = "Edit";
        editBtn.className = "edit-btn";
        editBtn.addEventListener("click", function () {
            editTab(index);
        });
        listItem.appendChild(editBtn);
        const deleteBtn = document.createElement("button");
        deleteBtn.textContent = "Delete";
        deleteBtn.className = "delete-btn";
        deleteBtn.addEventListener("click", function () {
            deleteBtn.textContent = "Sure";
            deleteTab(index);
        });
        listItem.appendChild(deleteBtn);
        pendingTabsList.appendChild(listItem);
    });
}

function editTab(index) {
    const tab = pendingTabs[index];
    const titleInput = document.createElement("input");
    titleInput.type = "text";
    titleInput.value = tab.title;
    const reminderInput = document.createElement("input");
    reminderInput.type = "datetime-local";
    reminderInput.value = tab.reminderTime;
    const saveBtn = document.createElement("button");
    saveBtn.textContent = "Save";
    saveBtn.addEventListener("click", function () {
        tab.title = titleInput.value;
        tab.reminderTime = reminderInput.value;
        chrome.storage.local.set({ pendingTabs: pendingTabs });
        updatePendingTabsList();
    });
    const editForm = document.createElement("form");
    editForm.appendChild(titleInput);
    editForm.appendChild(reminderInput);
    editForm.appendChild(saveBtn);
    document.body.appendChild(editForm);
}

function deleteTab(index) {
    pendingTabs.splice(index, 1);
    chrome.storage.local.set({ pendingTabs: pendingTabs });
    updatePendingTabsList();
}
document.addEventListener("DOMContentLoaded", function() {
    var pendingTabsList = document.getElementById("pending-tabs");
    chrome.runtime.sendMessage({ action: "getPendingTabs" }, function(response) {
      var pendingTabs = response.pendingTabs;
      pendingTabs.forEach(function(tab) {
        var tabListItem = document.createElement("li");
        tabListItem.textContent = tab.title;
        pendingTabsList.appendChild(tabListItem);
      });
    });
});


// Your code
let pendingTabs = [];

document.addEventListener("DOMContentLoaded", function () {
    const addTabBtn = document.getElementById("add-tab-btn");
    addTabBtn.addEventListener("click", function () {
        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
            const currentTab = tabs[0];
            const tabData = {
                title: currentTab.title,
                url: currentTab.url,
                reminder: false,
                reminderTime: null
            };
            pendingTabs.push(tabData);
            chrome.storage.local.set({ pendingTabs: pendingTabs });
            updatePendingTabsList();
        });
    });

    chrome.storage.local.get("pendingTabs", function (result) {
        if (result.pendingTabs) {
            pendingTabs = result.pendingTabs;
            updatePendingTabsList();
        }
    });
});

function updatePendingTabsList() {
    const pendingTabsList = document.getElementById("pending-tabs-list");
    pendingTabsList.innerHTML = "";
    pendingTabs.forEach((tab, index) => {
        const listItem = document.createElement("li");
        listItem.textContent = tab.title.substring(0, 15) + "...";
        listItem.dataset.index = index;
        if (tab.reminder) {
            listItem.textContent += " (Reminder set)";
        }
        const editBtn = document.createElement("button");
        editBtn.textContent = "Edit";
        editBtn.className = "edit-btn";
        editBtn.addEventListener("click", function () {
            editTab(index);
        });
        listItem.appendChild(editBtn);
        const deleteBtn = document.createElement("button");
        deleteBtn.textContent = "Delete";
        deleteBtn.className = "delete-btn";
        deleteBtn.addEventListener("click", function () {
            deleteBtn.textContent = "Sure";
            deleteTab(index);
        });
        listItem.appendChild(deleteBtn);
        pendingTabsList.appendChild(listItem);
    });
}

let editIndex = null; // My addition

function editTab(index) {
    if (editIndex !== null) return; // My addition

    const tab = pendingTabs[index];
    const titleInput = document.createElement("input");
    titleInput.type = "text";
    titleInput.value = tab.title;
    const reminderInput = document.createElement("input");
    reminderInput.type = "datetime-local";
    reminderInput.value = tab.reminderTime;
    const saveBtn = document.createElement("button");
    saveBtn.textContent = "Save";
    saveBtn.addEventListener("click", function () {
        tab.title = titleInput.value;
        tab.reminderTime = reminderInput.value;
        chrome.storage.local.set({ pendingTabs: pendingTabs });
        updatePendingTabsList();
        editIndex = null; // My addition
    });
    const editForm = document.createElement("form");
    editForm.appendChild(titleInput);
    editForm.appendChild(reminderInput);
    editForm.appendChild(saveBtn);
    document.body.appendChild(editForm);
    editIndex = index; // My addition
}

function deleteTab(index) {
    pendingTabs.splice(index, 1);
    chrome.storage.local.set({ pendingTabs: pendingTabs });
    updatePendingTabsList();
}

// My code
document.addEventListener("DOMContentLoaded", function() {
    var pendingTabsList = document.getElementById("pending-tabs");
    chrome.runtime.sendMessage({ action: "getPendingTabs" }, function(response) {
      var pendingTabs = response.pendingTabs;
      pendingTabs.forEach(function(tab) {
        var tabListItem = document.createElement("li");
        tabListItem.textContent = tab.title;
        pendingTabsList.appendChild(tabListItem);
      });
    });
});


///////////////////////// 2nd lastest


// Your code
let pendingTabs = [];

document.addEventListener("DOMContentLoaded", function () {
    const addTabBtn = document.getElementById("add-tab-btn");
    addTabBtn.addEventListener("click", function () {
        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
            const currentTab = tabs[0];
            const tabData = {
                title: currentTab.title,
                url: currentTab.url,
                reminder: false,
                reminderTime: null
            };
            pendingTabs.push(tabData);
            chrome.storage.local.set({ pendingTabs: pendingTabs });
            updatePendingTabsList();
        });
    });

    chrome.storage.local.get("pendingTabs", function (result) {
        if (result.pendingTabs) {
            pendingTabs = result.pendingTabs;
            updatePendingTabsList();
        }
    });
});

function updatePendingTabsList() {
    const pendingTabsList = document.getElementById("pending-tabs-list");
    pendingTabsList.innerHTML = "";
    pendingTabs.forEach((tab, index) => {
        const listItem = document.createElement("li");
        listItem.textContent = tab.title.substring(0, 15) + "...";
        listItem.dataset.index = index;
        if (tab.reminder) {
            listItem.textContent += " (Reminder set)";
        }
        const editBtn = document.createElement("button");
        editBtn.textContent = "Edit";
        editBtn.className = "edit-btn";
        editBtn.addEventListener("click", function () {
            editTab(index);
        });
        listItem.appendChild(editBtn);
        const deleteBtn = document.createElement("button");
        deleteBtn.textContent = "Delete";
        deleteBtn.className = "delete-btn";
        deleteBtn.addEventListener("click", function () {
            deleteBtn.textContent = "Sure";
            deleteTab(index);
        });
        listItem.appendChild(deleteBtn);
        pendingTabsList.appendChild(listItem);
    });
}

let editIndex = null; // My addition

function editTab(index) {
    if (editIndex !== null) return; // My addition

    const tab = pendingTabs[index];
    const titleInput = document.createElement("input");
    titleInput.type = "text";
    titleInput.value = tab.title;
    const reminderInput = document.createElement("input");
    reminderInput.type = "datetime-local";
    reminderInput.value = tab.reminderTime;
    const saveBtn = document.createElement("button");
    saveBtn.textContent = "Save";
    saveBtn.addEventListener("click", function () {
        tab.title = titleInput.value;
        tab.reminderTime = reminderInput.value;
        chrome.storage.local.set({ pendingTabs: pendingTabs });
        updatePendingTabsList();
        editIndex = null; // My addition
    });
    const editForm = document.createElement("form");
    editForm.appendChild(titleInput);
    editForm.appendChild(reminderInput);
    editForm.appendChild(saveBtn);
    document.body.appendChild(editForm);
    editIndex = index; // My addition
}

function deleteTab(index) {
    pendingTabs.splice(index, 1);
    chrome.storage.local.set({ pendingTabs: pendingTabs });
    updatePendingTabsList();
}

// My code
document.addEventListener("DOMContentLoaded", function() {
    var pendingTabsList = document.getElementById("pending-tabs");
    chrome.runtime.sendMessage({ action: "getPendingTabs" }, function(response) {
      var pendingTabs = response.pendingTabs;
      pendingTabs.forEach(function(tab) {
        var tabListItem = document.createElement("li");
        tabListItem.textContent = tab.title;
        pendingTabsList.appendChild(tabListItem);
      });
    });
});
// Add this code to your existing script
window.onbeforeunload = function(e) {
    if (pendingTabs.length > 0) {
      var dialogText = 'You have pending tabs. Are you sure you want to close the window?';
      e.returnValue = dialogText;
      return dialogText;
    }
  };



  ///////////////////////lastest///////////////////////////////


let pendingTabs = [];
let currentEditingIndex = null;

document.addEventListener("DOMContentLoaded", function () {
    const addTabBtn = document.getElementById("add-tab-btn");
    addTabBtn.addEventListener("click", function () {
        chrome.tabs.query({ active: true, currentWindow: true }, function (tabs) {
            const currentTab = tabs[0];
            const tabData = {
                title: currentTab.title,
                url: currentTab.url
            };
            pendingTabs.push(tabData);
            chrome.storage.local.set({ pendingTabs: pendingTabs });
            updatePendingTabsList();
        });
    });

    chrome.storage.local.get("pendingTabs", function (result) {
        if (result.pendingTabs) {
            pendingTabs = result.pendingTabs;
            updatePendingTabsList();
        }
    });
});

function updatePendingTabsList() {
    const pendingTabsList = document.getElementById("pending-tabs-list");
    pendingTabsList.innerHTML = "";
    pendingTabs.forEach((tab, index) => {
        const listItem = document.createElement("li");
        const tabLink = document.createElement("a");
        tabLink.href = tab.url;
        tabLink.target = "_blank";
        listItem.textContent = tab.title.substring(0, 15) + "...";
        listItem.dataset.index = index;
        const editBtn = document.createElement("button");
        editBtn.textContent = "Edit";
        editBtn.className = "edit-btn";
        editBtn.addEventListener("click", function () {
            if (currentEditingIndex === null) {
                currentEditingIndex = index;
                editTab(index);
            }
        });
        listItem.appendChild(editBtn);
        const deleteBtn = document.createElement("button");
        deleteBtn.textContent = "Delete";
        deleteBtn.className = "delete-btn";
        deleteBtn.addEventListener("click", function () {
            deleteBtn.textContent = "Sure";
            deleteTab(index);
        });
        listItem.appendChild(deleteBtn);
        pendingTabsList.appendChild(listItem);
    });
}

function editTab(index) {
    if (currentEditingIndex === index) {
        const tab = pendingTabs[index];
        const titleInput = document.createElement("input");
        titleInput.type = "text";
        titleInput.value = tab.title;
        const saveBtn = document.createElement("button");
        saveBtn.textContent = "Save";
        saveBtn.addEventListener("click", function () {
            tab.title = titleInput.value;
            chrome.storage.local.set({ pendingTabs: pendingTabs });
            currentEditingIndex = null;
            updatePendingTabsList();
        });
        const cancelBtn = document.createElement("button");
        cancelBtn.textContent = "Cancel";
        cancelBtn.addEventListener("click", function () {
            currentEditingIndex = null;
            updatePendingTabsList();
        });
        const editForm = document.createElement("form");
        editForm.appendChild(titleInput);
        editForm.appendChild(saveBtn);
        editForm.appendChild(cancelBtn);
        document.body.appendChild(editForm);
    }
}

function deleteTab(index) {
    pendingTabs.splice(index, 1);
    chrome.storage.local.set({ pendingTabs: pendingTabs });
    updatePendingTabsList();
}